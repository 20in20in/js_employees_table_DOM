{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,EAAS,SAAS,gBAAgB,CAAC,MACnC,EAAQ,SAAS,aAAa,CAAC,eAC/B,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAY,EAAM,gBAAgB,CAAC,Q,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAErC,EAAY,EACZ,EAAkB,GA0BtB,EAAO,OAAO,CAAC,SAAC,CAAA,CAAO,CAAvB,EACE,EAAM,gBAAgB,CAAC,QAAS,WAxB5B,IAyBU,EAxBZ,EAAY,EAEZ,GAAa,GAGf,EAAM,IAAI,CAAC,SAAC,CAAA,CAAG,CAAf,EACE,IAAM,EAAM,EAAE,KAAK,CAkBP,EAlBc,CAAC,WAAW,CAChC,EAAM,EAAE,KAAK,CAiBP,EAjBc,CAAC,WAAW,QAEtC,AAAI,AAAC,MAAM,IAAS,MAAM,GAGjB,EAAY,EAAI,aAAa,CAAC,EAAK,KAAM,CAAE,QAAS,CAAA,CAAK,GAFzD,EAAa,CAAA,WAAW,GAAO,WAAW,EAAA,CAIrD,GAEA,EAAM,SAAS,CAAG,GAClB,EAAM,OAAO,CAAC,SAAC,CAAf,EAAsB,OAAA,EAAM,MAAM,CAAC,E,GAEnC,EAKc,CACd,EACF,GAEA,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EAGE,AAFe,SAAS,gBAAgB,CAAC,YAElC,OAAO,CAAC,SAAC,CAAhB,EACE,EAAM,SAAS,CAAC,MAAM,CAAC,SACzB,GAEA,IAAM,EAAW,EAAE,MAAM,CAAC,OAAO,CAAC,MAE9B,GACF,EAAS,SAAS,CAAC,GAAG,CAAC,SAE3B,GAIA,IAAM,EAAO,SAAS,aAAa,CAAC,OAEpC,CAAA,EAAK,SAAS,CAAG,oBACjB,SAAS,IAAI,CAAC,MAAM,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar theads = document.querySelectorAll(\"th\");\nvar tbody = document.querySelector(\"table tbody\");\nvar trArr = _to_consumable_array(tbody.querySelectorAll(\"tr\"));\nvar sortOrder = 1;\nvar lastColumnIndex = -1;\nfunction sortColumns(index) {\n    if (lastColumnIndex !== index) sortOrder = 1;\n    else sortOrder *= -1;\n    trArr.sort(function(a, b) {\n        var trA = a.cells[index].textContent;\n        var trB = b.cells[index].textContent;\n        if (!isNaN(trA) && !isNaN(trB)) return sortOrder * (parseFloat(trA) - parseFloat(trB));\n        else return sortOrder * trA.localeCompare(trB, \"en\", {\n            numeric: true\n        });\n    });\n    tbody.innerHTML = \"\";\n    trArr.forEach(function(tr) {\n        return tbody.append(tr);\n    });\n    lastColumnIndex = index;\n}\ntheads.forEach(function(thead, index) {\n    thead.addEventListener(\"click\", function() {\n        sortColumns(index);\n    });\n});\ntbody.addEventListener(\"click\", function(e) {\n    var trRows = document.querySelectorAll(\"tbody tr\");\n    trRows.forEach(function(trRow) {\n        trRow.classList.remove(\"active\");\n    });\n    var clickRow = e.target.closest(\"tr\");\n    if (clickRow) clickRow.classList.add(\"active\");\n});\n//* add a form to the document.\n//* Form allows users to add new employees to the spreadsheet.\nvar form = document.createElement(\"form\");\nform.className = \"new-employee-form\";\ndocument.body.append(form);\nvar fealds = [\n    {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\",\n        qa: \"name\"\n    },\n    {\n        label: \"Position\",\n        name: \"position\",\n        type: \"text\",\n        qa: \"position\"\n    },\n    {\n        label: \"Office\",\n        name: \" office\",\n        type: \"select\",\n        qa: \"office\",\n        options: [\n            \"Select an office\",\n            \"Tokyo\",\n            \"Singapore\",\n            \"London\",\n            \"New York\",\n            \"Edinburgh\",\n            \"San Francisco\"\n        ]\n    },\n    {\n        label: \"Age\",\n        name: \"age\",\n        type: \"number\",\n        qa: \"age\"\n    },\n    {\n        label: \"Salary\",\n        name: \"salary\",\n        type: \"number\",\n        qa: \"salary\"\n    }\n];\nfealds.forEach(function(feald) {\n    var label = document.createElement(\"label\");\n    label.textContent = feald.label + \": \";\n    var input = document.createElement(\"input\");\n    if (feald.type === \"select\") {\n        input = document.createElement(\"select\");\n        feald.options.forEach(function(option) {\n            var optionElement = document.createElement(\"option\");\n            optionElement.value = option;\n            optionElement.textContent = option;\n            input.appendChild(optionElement);\n        });\n    } else {\n        input = document.createElement(\"input\");\n        input.type = feald.type;\n    }\n    input.name = feald.name;\n    input.setAttribute(\"data-qa\", feald.qa);\n    label.appendChild(input);\n    form.appendChild(label);\n});\nvar submitButton = document.createElement(\"button\");\nsubmitButton.type = \"submit\";\nsubmitButton.textContent = \"Save to table\";\nform.append(submitButton);\n//* Show notification if form data is invalid.\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var formData = new FormData(form);\n    var newRow = document.createElement(\"tr\");\n    var valid = true;\n    formData.forEach(function(value, key) {\n        var td = document.createElement(\"td\");\n        if (key === \"salary\") {\n            var normalisedSalary = parseFloat(value).toLocaleString(\"en-US\", {\n                style: \"currency\",\n                currency: \"USD\",\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0\n            });\n            td.textContent = normalisedSalary;\n        } else td.textContent = value;\n        newRow.append(td);\n        if (!checkDataValidity(key, value)) valid = false;\n    });\n    if (valid) {\n        tbody.append(newRow);\n        trArr.push(newRow);\n        showNotification(\"New employee added successfully\", \"success\");\n        form.reset();\n    } else showNotification(\"Invalid data!\", \"error\");\n});\nfunction checkDataValidity(id, value) {\n    if (id === \"name\") return value.trim().length >= 4;\n    if (id === \"age\") return value >= 18 && value <= 90;\n    if (id === \"salary\") return value > 0;\n    return !!value.trim();\n}\nvar notificationContainer = document.createElement(\"div\");\nnotificationContainer.id = \"notification-container\";\ndocument.body.appendChild(notificationContainer);\nfunction showNotification(message, type) {\n    var notification = document.createElement(\"div\");\n    notification.className = \"notification \".concat(type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.textContent = message;\n    notificationContainer.innerHTML = \"\";\n    notificationContainer.appendChild(notification);\n    setTimeout(function() {\n        return notification.remove();\n    }, 5000);\n}\n//* Implement editing of table cells by double-clicking on it (optional) */\ntbody.addEventListener(\"dblclick\", function(e) {\n    var cell = e.target;\n    var initialValue = cell.textContent;\n    if (cell.tagName.toLowerCase() === \"td\") {\n        var input = document.createElement(\"input\");\n        input.className = \"cell-input\";\n        input.value = initialValue;\n        cell.textContent = \"\";\n        cell.appendChild(input);\n        input.focus();\n        input.addEventListener(\"blur\", function() {\n            var newValue = input.value.trim();\n            cell.textContent = newValue || initialValue;\n        });\n        input.addEventListener(\"keypress\", function(ev) {\n            if (ev.key === \"Enter\") {\n                var newValue = input.value.trim();\n                cell.textContent = newValue || initialValue;\n            }\n        });\n    }\n});\n\n//# sourceMappingURL=index.db8b50d7.js.map\n","'use strict';\n\nconst theads = document.querySelectorAll('th');\nconst tbody = document.querySelector('table tbody');\nconst trArr = [...tbody.querySelectorAll('tr')];\n\nlet sortOrder = 1;\nlet lastColumnIndex = -1;\n\nfunction sortColumns(index) {\n  if (lastColumnIndex !== index) {\n    sortOrder = 1;\n  } else {\n    sortOrder *= -1;\n  }\n\n  trArr.sort((a, b) => {\n    const trA = a.cells[index].textContent;\n    const trB = b.cells[index].textContent;\n\n    if (!isNaN(trA) && !isNaN(trB)) {\n      return sortOrder * (parseFloat(trA) - parseFloat(trB));\n    } else {\n      return sortOrder * trA.localeCompare(trB, 'en', { numeric: true });\n    }\n  });\n\n  tbody.innerHTML = '';\n  trArr.forEach((tr) => tbody.append(tr));\n\n  lastColumnIndex = index;\n}\n\ntheads.forEach((thead, index) => {\n  thead.addEventListener('click', () => {\n    sortColumns(index);\n  });\n});\n\ntbody.addEventListener('click', (e) => {\n  const trRows = document.querySelectorAll('tbody tr');\n\n  trRows.forEach((trRow) => {\n    trRow.classList.remove('active');\n  });\n\n  const clickRow = e.target.closest('tr');\n\n  if (clickRow) {\n    clickRow.classList.add('active');\n  }\n});\n\n//* add a form to the document.\n//* Form allows users to add new employees to the spreadsheet.\nconst form = document.createElement('form');\n\nform.className = 'new-employee-form';\ndocument.body.append(form);\n\nconst fealds = [\n  {\n    label: 'Name',\n    name: 'name',\n    type: 'text',\n    qa: 'name',\n  },\n  {\n    label: 'Position',\n    name: 'position',\n    type: 'text',\n    qa: 'position',\n  },\n  {\n    label: 'Office',\n    name: ' office',\n    type: 'select',\n    qa: 'office',\n    options: [\n      'Select an office',\n      'Tokyo',\n      'Singapore',\n      'London',\n      'New York',\n      'Edinburgh',\n      'San Francisco',\n    ],\n  },\n  {\n    label: 'Age',\n    name: 'age',\n    type: 'number',\n    qa: 'age',\n  },\n  {\n    label: 'Salary',\n    name: 'salary',\n    type: 'number',\n    qa: 'salary',\n  },\n];\n\nfealds.forEach((feald) => {\n  const label = document.createElement('label');\n\n  label.textContent = feald.label + ': ';\n\n  let input = document.createElement('input');\n\n  if (feald.type === 'select') {\n    input = document.createElement('select');\n\n    feald.options.forEach((option) => {\n      const optionElement = document.createElement('option');\n\n      optionElement.value = option;\n      optionElement.textContent = option;\n      input.appendChild(optionElement);\n    });\n  } else {\n    input = document.createElement('input');\n    input.type = feald.type;\n  }\n\n  input.name = feald.name;\n  input.setAttribute('data-qa', feald.qa);\n  label.appendChild(input);\n  form.appendChild(label);\n});\n\nconst submitButton = document.createElement('button');\n\nsubmitButton.type = 'submit';\nsubmitButton.textContent = 'Save to table';\nform.append(submitButton);\n\n//* Show notification if form data is invalid.\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const formData = new FormData(form);\n  const newRow = document.createElement('tr');\n  let valid = true;\n\n  formData.forEach((value, key) => {\n    const td = document.createElement('td');\n\n    if (key === 'salary') {\n      const normalisedSalary = parseFloat(value).toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      });\n\n      td.textContent = normalisedSalary;\n    } else {\n      td.textContent = value;\n    }\n\n    newRow.append(td);\n\n    if (!checkDataValidity(key, value)) {\n      valid = false;\n    }\n  });\n\n  if (valid) {\n    tbody.append(newRow);\n    trArr.push(newRow);\n    showNotification('New employee added successfully', 'success');\n    form.reset();\n  } else {\n    showNotification('Invalid data!', 'error');\n  }\n});\n\nfunction checkDataValidity(id, value) {\n  if (id === 'name') {\n    return value.trim().length >= 4;\n  }\n\n  if (id === 'age') {\n    return value >= 18 && value <= 90;\n  }\n\n  if (id === 'salary') {\n    return value > 0;\n  }\n\n  return !!value.trim();\n}\n\nconst notificationContainer = document.createElement('div');\n\nnotificationContainer.id = 'notification-container';\ndocument.body.appendChild(notificationContainer);\n\nfunction showNotification(message, type) {\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${type}`;\n  notification.setAttribute('data-qa', 'notification');\n  notification.textContent = message;\n  notificationContainer.innerHTML = '';\n  notificationContainer.appendChild(notification);\n  setTimeout(() => notification.remove(), 5000);\n}\n\n//* Implement editing of table cells by double-clicking on it (optional) */\ntbody.addEventListener('dblclick', (e) => {\n  const cell = e.target;\n  const initialValue = cell.textContent;\n\n  if (cell.tagName.toLowerCase() === 'td') {\n    const input = document.createElement('input');\n\n    input.className = 'cell-input';\n    input.value = initialValue;\n    cell.textContent = '';\n    cell.appendChild(input);\n    input.focus();\n\n    input.addEventListener('blur', () => {\n      const newValue = input.value.trim();\n\n      cell.textContent = newValue || initialValue;\n    });\n\n    input.addEventListener('keypress', (ev) => {\n      if (ev.key === 'Enter') {\n        const newValue = input.value.trim();\n\n        cell.textContent = newValue || initialValue;\n      }\n    });\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","theads","document","querySelectorAll","tbody","querySelector","trArr","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","sortOrder","lastColumnIndex","forEach","thead","index","addEventListener","sort","a","b","trA","cells","textContent","trB","isNaN","localeCompare","numeric","parseFloat","innerHTML","tr","append","e","trRows","trRow","classList","remove","clickRow","target","closest","add","form","createElement","className","body","fealds","label","type","qa","options","feald","input","option","optionElement","value","appendChild","setAttribute","submitButton","preventDefault","formData","FormData","newRow","valid","key","td","normalisedSalary","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","id","trim","push","showNotification","reset","notificationContainer","message","notification","concat","setTimeout","cell","initialValue","tagName","toLowerCase","focus","newValue","ev"],"version":3,"file":"index.db8b50d7.js.map"}